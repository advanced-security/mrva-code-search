#!/bin/bash

set -euo pipefail

workspace_storage_path_mac="$HOME/Library/Application Support/Code/User/workspaceStorage"

# make sure we have the right args, we need 4
if [ $# -ne 4 ]; then
    echo "Usage: $0 <name of repo list> <query> <language> <workspace>"
    exit 1
fi

# grab code search query and language from command line
name=$1
query=$2
language=$3
workspace_path=$4

# check the name, query, language and workspace_path variables are non-empty
if [ -z "$name" ] || [ -z "$query" ] || [ -z "$language" ] || [ -z "$workspace_path" ]; then
    echo "Usage: $0 <name of repo list> <query> <language> <workspace>"
    echo "All arguments must be non-empty"
    exit 1
fi

# check we have gh and jq installed
if ! command -v gh &> /dev/null; then
    echo "gh could not be found"
    exit 1
fi

if ! command -v jq &> /dev/null; then
    echo "jq could not be found"
    exit 1
fi

# check we are auth'd to GitHub in gh
if ! gh auth status -h github.com &> /dev/null; then
    echo "gh is not auth'd to GitHub.com"
    exit 1
fi

# do the search on github
do_query() {
    # url escape the query and language
    query=$(echo -n "$1" | jq -sRr @uri)
    language=$(echo -n "$2" | jq -sRr @uri)
    declare -i repo_limit=1000
    declare -i repo_count=0
    declare -i new_repo_count=0
    declare -i per_page=100
    declare -i max_pages=2
    declare -i page=0
    declare new_repos
    declare all_repos
    declare -i sleep_time=6

    echo -n "Searching for repos matching '${query}' in '${language}'"

    # get the first 1000+delta matching repos
    # stop at max_pages (to avoid triggering secondary rate limiting)
    while [[ $page -lt $max_pages && $repo_count -lt $repo_limit ]]
    do
        new_repos=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" "/search/code?q=${query}+language%3a${language}&per_page=${per_page}&page=${page}" | jq '[.items[].repository.full_name] | unique')
        new_repo_count=$(echo "${new_repos}" | jq length)
        all_repos=$(echo "${all_repos}" "${new_repos}" | jq -s add | jq unique)
        repo_count=$(echo "${all_repos}" | jq length)
        page=$((page + 1))
        echo -n "; ${page}: ${new_repo_count}/${repo_count}"
        sleep "${sleep_time}"
    done

    export repo_json="$all_repos"
}

# find the first matching workspace in the vscode-codeql extension settings
# if we don't find one, try the parent directory, and so on
workspace_storage_path=""

while [ -z "$workspace_storage_path" ] && [ -n "$workspace_path" ]; do
    workspace_storage_path=$(set -euo pipefail; find "${workspace_storage_path_mac}" -type f -name "workspace.json" -exec grep -l "${workspace_path}" {} \; | head -n 1)
    workspace_path=$(dirname "$workspace_path")
done

echo "Workspace storage path: ${workspace_storage_path}"

# insert the list of repos into the GitHub.vscode-codeql/databases.json file in the workspace storage
# {
#   "version": 1,
#   "databases": {
#     "variantAnalysis": {
#       "repositoryLists": [
#         {
#           "name": "$name",
#           "repositories": [
#             ...
#           ]
#         }
#       ]
#     }
#   }
# }

if [ -n "$workspace_storage_path" ]; then
    declare repo_json
    do_query "${query}" "${language}"

    # get the databases.json file path
    databases_json_path=$(dirname "$workspace_storage_path")/GitHub.vscode-codeql/databases.json

    # if there is no file there, make it ourselves from scratch
    if [ ! -f "$databases_json_path" ]; then
        echo "Creating databases.json file"
        mkdir -p "$(dirname "$databases_json_path")"

        # use a HERE doc to write the template JSON to the file
        cat << EOF > "$databases_json_path"
{
    "version": 1,
    "databases": {
        "variantAnalysis": {
        "repositoryLists": [],
        "owners": [],
        "repositories": []
        }
    },
    "selected": {
        "kind": "variantAnalysisSystemDefinedList",
        "listName": "top_10"
    }
}
EOF
    fi

    # get the databases.json file contents
    databases_json=$(cat "$databases_json_path")

    # insert the list of repos into the databases.json file
    # if an entry with a matching name already exists in the JSON, add any new ones
    # otherwise, create a new entry
    # write out the whole JSON file with the new entry inserted
    if [ "$(set -euo pipefail; echo "$databases_json" | jq --arg name "$name" '.databases.variantAnalysis.repositoryLists[] | select(.name == $name)')" != "" ]; then
        json_query='(.databases.variantAnalysis.repositoryLists[] | select(.name == $name).repositories) |= (. + $repos | unique)'
    else
        json_query='.databases.variantAnalysis.repositoryLists += [{"name": $name, "repositories": $repos}]'
    fi

    databases_json=$(set -euo pipefail; echo "$databases_json" | jq --arg name "$name" --argjson repos "$repo_json" "$json_query")

    # set our MRVA list as the selected list
    databases_json=$(set -euo pipefail; echo "$databases_json" | jq --arg name "$name" '.selected = {"kind": "variantAnalysisUserDefinedList", "listName": $name}')

    # write the databases.json file
    echo "$databases_json" > "$databases_json_path"
    echo "Done"
else
    echo "Could not find workspace storage path for workspace ${workspace_path}" >&2
    exit 1
fi